// Generated by the typy Cpp.GenerateExtention.  DO NOT EDIT!

#include "SkillParam.h"
#include "list.h"
#include "dict.h"

TypyObjectBegin(SkillParam);

SkillParam::SkillParam() : Message() {
	PyObject_INIT(this, &Object<SkillParam>::_Type);
	ZERO(SkillParam, p_buckID, _cached_size);
}

void SkillParam::Clear() {
	::typy::Clear(p_buckID);
	::typy::Clear(p_destPos);
	::typy::Clear(p_destRot);
	::typy::Clear(p_extraParam);
	::typy::Clear(p_origPos);
	::typy::Clear(p_origRot);
	::typy::Clear(p_targetID);
	::typy::Clear(p_targetIDs);
}

void SkillParam::MergeFrom(const SkillParam& from) {
	if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
	::typy::MergeFrom(p_buckID, from.p_buckID);
	::typy::MergeFrom(p_destPos, from.p_destPos);
	::typy::MergeFrom(p_destRot, from.p_destRot);
	::typy::MergeFrom(p_extraParam, from.p_extraParam);
	::typy::MergeFrom(p_origPos, from.p_origPos);
	::typy::MergeFrom(p_origRot, from.p_origRot);
	::typy::MergeFrom(p_targetID, from.p_targetID);
	::typy::MergeFrom(p_targetIDs, from.p_targetIDs);
}

void SkillParam::SerializeWithCachedSizes(CodedOutputStream* output) const {
	::typy::Write(1, p_buckID, output);
	::typy::Write(2, p_destPos, output);
	::typy::Write(3, p_destRot, output);
	::typy::Write(4, p_extraParam, output);
	::typy::Write(5, p_origPos, output);
	::typy::Write(6, p_origRot, output);
	::typy::Write(7, p_targetID, output);
	::typy::Write(8, p_targetIDs, output);
}

int SkillParam::ByteSize() const {
	int total_size = 0;
	::typy::ByteSize(total_size, 1, p_buckID);
	::typy::ByteSize(total_size, 1, p_destPos);
	::typy::ByteSize(total_size, 1, p_destRot);
	::typy::ByteSize(total_size, 1, p_extraParam);
	::typy::ByteSize(total_size, 1, p_origPos);
	::typy::ByteSize(total_size, 1, p_origRot);
	::typy::ByteSize(total_size, 1, p_targetID);
	::typy::ByteSize(total_size, 1, p_targetIDs);
	GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
	_cached_size = total_size;
	GOOGLE_SAFE_CONCURRENT_WRITES_END();
	return total_size;
}

bool SkillParam::MergePartialFromCodedStream(CodedInputStream* input) {
	BEGINE_READ_CASE(8)
	FIRST_READ_NORMAL_CASE(1, p_buckID, bytes)
	NEXT_READ_NORMAL_CASE(2, p_destPos, Python<Shadow_Vector3>)
	NEXT_READ_NORMAL_CASE(3, p_destRot, Python<Shadow_Vector3>)
	NEXT_READ_REPEATED_OBJECT_CASE(4, p_extraParam, SINGLE_ARG(Dict<bytes, Vbbyfi >)::Entry, PREV_NO_REPEATED_OBJECT, NEXT_NO_REPEATED_OBJECT)
	NEXT_READ_NORMAL_CASE(5, p_origPos, Python<Shadow_Vector3>)
	NEXT_READ_NORMAL_CASE(6, p_origRot, Python<Shadow_Vector3>)
	NEXT_READ_NORMAL_CASE(7, p_targetID, bytes)
	NEXT_READ_NORMAL_CASE(8, p_targetIDs, bytes)
	END_READ_CASE()
}

// ===================================================================

const int SkillParam::PropertyCount = 8;
char* SkillParam::Properties[] = {
	"buckID",
	"destPos",
	"destRot",
	"extraParam",
	"origPos",
	"origRot",
	"targetID",
	"targetIDs"
};

int SkillParam::PropertyByteSize(int tag) const {
	int size = 0;
	switch(tag) {
	case 1: ::typy::ByteSize(size, 1, p_buckID); if (size == 0) { size = 1; } break;
	case 2: ::typy::ByteSize(size, 1, p_destPos); if (size == 0) { size = 1; } break;
	case 3: ::typy::ByteSize(size, 1, p_destRot); if (size == 0) { size = 1; } break;
	case 4: ::typy::ByteSize(size, 1, p_extraParam); if (size == 0) { size = 1; } break;
	case 5: ::typy::ByteSize(size, 1, p_origPos); if (size == 0) { size = 1; } break;
	case 6: ::typy::ByteSize(size, 1, p_origRot); if (size == 0) { size = 1; } break;
	case 7: ::typy::ByteSize(size, 1, p_targetID); if (size == 0) { size = 1; } break;
	case 8: ::typy::ByteSize(size, 1, p_targetIDs); if (size == 0) { size = 1; } break;
	}
	return size;
}

void SkillParam::SerializeProperty(CodedOutputStream* output, int tag) const {
	switch(tag) {
	case 1:
		::typy::Write(1, p_buckID, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(1, p_buckID, output);
		}
		break;
	case 2:
		::typy::Write(2, p_destPos, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(2, p_destPos, output);
		}
		break;
	case 3:
		::typy::Write(3, p_destRot, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(3, p_destRot, output);
		}
		break;
	case 4:
		::typy::Write(4, p_extraParam, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(4, p_extraParam, output);
		}
		break;
	case 5:
		::typy::Write(5, p_origPos, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(5, p_origPos, output);
		}
		break;
	case 6:
		::typy::Write(6, p_origRot, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(6, p_origRot, output);
		}
		break;
	case 7:
		::typy::Write(7, p_targetID, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(7, p_targetID, output);
		}
		break;
	case 8:
		::typy::Write(8, p_targetIDs, output);
		if (output->ByteCount() <= 0) {
			::typy::WriteTag(8, p_targetIDs, output);
		}
		break;
	}
}

int SkillParam::DeserializeProperty(CodedInputStream* input) {
	const void* data;
	int size;
	input->GetDirectBufferPointerInline(&data, &size);
	CodedInputStream tagInput(reinterpret_cast<const uint8*>(data), size);
	::std::pair<uint32, bool> p = tagInput.ReadTagWithCutoff(_MAXTAG(25)
		<= 0x7F ? 0x7F : (_MAXTAG(25) <= 0x3FFF ? 0x3FFF : _MAXTAG(25)));
	uint32 tag = p.first;
	if (!p.second) { return 0; }

	int index = WireFormatLite::GetTagFieldNumber(tag);
	switch(index) {
	case 1: ::typy::Clear(p_buckID); break;
	case 2: ::typy::Clear(p_destPos); break;
	case 3: ::typy::Clear(p_destRot); break;
	case 4: ::typy::Clear(p_extraParam); break;
	case 5: ::typy::Clear(p_origPos); break;
	case 6: ::typy::Clear(p_origRot); break;
	case 7: ::typy::Clear(p_targetID); break;
	case 8: ::typy::Clear(p_targetIDs); break;
	}

	if (!tagInput.ExpectAtEnd()) {
		MergePartialFromCodedStream(input);
	}
	return index;
}

bool SkillParam::SetPropertySequence(PyObject* args) {
	for (Py_ssize_t i = 0; i < PyTuple_GET_SIZE(args); i++) {
		switch(i) {
		case 0: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 0), p_buckID, "Property 'buckID' expect bytes, but ")) { return false; } break;
		case 1: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 1), p_destPos, "Property 'destPos' expect Python<Shadow_Vector3>, but ")) { return false; } break;
		case 2: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 2), p_destRot, "Property 'destRot' expect Python<Shadow_Vector3>, but ")) { return false; } break;
		case 3: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 3), p_extraParam, "Property 'extraParam' expect Dict(bytes -> Vbbyfi), but ")) { return false; } break;
		case 4: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 4), p_origPos, "Property 'origPos' expect Python<Shadow_Vector3>, but ")) { return false; } break;
		case 5: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 5), p_origRot, "Property 'origRot' expect Python<Shadow_Vector3>, but ")) { return false; } break;
		case 6: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 6), p_targetID, "Property 'targetID' expect bytes, but ")) { return false; } break;
		case 7: if (!::typy::CheckAndSet(PyTuple_GET_ITEM(args, 7), p_targetIDs, "Property 'targetIDs' expect List(bytes), but ")) { return false; } break;
		default: PyErr_Format(PyExc_TypeError, "Unsurported property number %d.", i); return false;
		}
	}
	return true;
}

PyObject* SkillParam::GetPropertySequence() {
	PyObject* result = PyTuple_New(8);
	if (result == NULL) { return result; }
	PyTuple_SET_ITEM(result, 0, ::typy::GetPyObject(p_buckID));
	PyTuple_SET_ITEM(result, 1, ::typy::GetPyObject(p_destPos));
	PyTuple_SET_ITEM(result, 2, ::typy::GetPyObject(p_destRot));
	PyTuple_SET_ITEM(result, 3, ::typy::GetPyObject(p_extraParam));
	PyTuple_SET_ITEM(result, 4, ::typy::GetPyObject(p_origPos));
	PyTuple_SET_ITEM(result, 5, ::typy::GetPyObject(p_origRot));
	PyTuple_SET_ITEM(result, 6, ::typy::GetPyObject(p_targetID));
	PyTuple_SET_ITEM(result, 7, ::typy::GetPyObject(p_targetIDs));
	return result;
}

// ===================================================================

TYPY_GETSET(SkillParam, p_buckID, bytes);
TYPY_GETSET(SkillParam, p_destPos, Python<Shadow_Vector3>);
TYPY_GETSET(SkillParam, p_destRot, Python<Shadow_Vector3>);
TYPY_GETSET(SkillParam, p_extraParam, Dict(bytes -> Vbbyfi));
TYPY_GETSET(SkillParam, p_origPos, Python<Shadow_Vector3>);
TYPY_GETSET(SkillParam, p_origRot, Python<Shadow_Vector3>);
TYPY_GETSET(SkillParam, p_targetID, bytes);
TYPY_GETSET(SkillParam, p_targetIDs, List(bytes));

template <> PyGetSetDef Object<SkillParam>::GetSet[] = {
	{"buckID", (getter)Get_p_buckID, (setter)Set_p_buckID, "Property buckID"},
	{"destPos", (getter)Get_p_destPos, (setter)Set_p_destPos, "Property destPos"},
	{"destRot", (getter)Get_p_destRot, (setter)Set_p_destRot, "Property destRot"},
	{"extraParam", (getter)Get_p_extraParam, (setter)Set_p_extraParam, "Property extraParam"},
	{"origPos", (getter)Get_p_origPos, (setter)Set_p_origPos, "Property origPos"},
	{"origRot", (getter)Get_p_origRot, (setter)Set_p_origRot, "Property origRot"},
	{"targetID", (getter)Get_p_targetID, (setter)Set_p_targetID, "Property targetID"},
	{"targetIDs", (getter)Get_p_targetIDs, (setter)Set_p_targetIDs, "Property targetIDs"},
	{NULL}
};

TypyObjectEnd(SkillParam);
